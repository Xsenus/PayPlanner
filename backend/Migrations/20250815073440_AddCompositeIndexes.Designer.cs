// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using PayPlanner.Api.Data;

#nullable disable

namespace PayPlanner.Api.Migrations
{
    [DbContext(typeof(PaymentContext))]
    [Migration("20250815073440_AddCompositeIndexes")]
    partial class AddCompositeIndexes
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "9.0.8");

            modelBuilder.Entity("PayPlanner.Api.Models.Client", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("TEXT");

                    b.Property<string>("Company")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsActive")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("TEXT");

                    b.Property<string>("Notes")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("TEXT");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("CreatedAt")
                        .HasDatabaseName("IX_Clients_CreatedAt");

                    b.HasIndex("Email")
                        .HasDatabaseName("IX_Clients_Email");

                    b.HasIndex("IsActive")
                        .HasDatabaseName("IX_Clients_IsActive");

                    b.HasIndex("Name")
                        .HasDatabaseName("IX_Clients_Name");

                    b.HasIndex("IsActive", "Name")
                        .HasDatabaseName("IX_Clients_IsActive_Name");

                    b.ToTable("Clients");
                });

            modelBuilder.Entity("PayPlanner.Api.Models.ClientCase", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("ClientId")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("TEXT");

                    b.Property<int>("Status")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("CreatedAt")
                        .HasDatabaseName("IX_ClientCases_CreatedAt");

                    b.HasIndex("Status")
                        .HasDatabaseName("IX_ClientCases_Status");

                    b.HasIndex("ClientId", "CreatedAt")
                        .HasDatabaseName("IX_ClientCases_ClientId_CreatedAt");

                    b.HasIndex("ClientId", "Status")
                        .HasDatabaseName("IX_ClientCases_ClientId_Status");

                    b.ToTable("ClientCases");
                });

            modelBuilder.Entity("PayPlanner.Api.Models.DealType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("ColorHex")
                        .IsRequired()
                        .HasMaxLength(7)
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsActive")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("IsActive")
                        .HasDatabaseName("IX_DealTypes_IsActive");

                    b.HasIndex("Name")
                        .HasDatabaseName("IX_DealTypes_Name");

                    b.HasIndex("IsActive", "Name")
                        .HasDatabaseName("IX_DealTypes_IsActive_Name");

                    b.ToTable("DealTypes");
                });

            modelBuilder.Entity("PayPlanner.Api.Models.IncomeType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("ColorHex")
                        .IsRequired()
                        .HasMaxLength(7)
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsActive")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("IsActive")
                        .HasDatabaseName("IX_IncomeTypes_IsActive");

                    b.HasIndex("Name")
                        .HasDatabaseName("IX_IncomeTypes_Name");

                    b.HasIndex("IsActive", "Name")
                        .HasDatabaseName("IX_IncomeTypes_IsActive_Name");

                    b.ToTable("IncomeTypes");
                });

            modelBuilder.Entity("PayPlanner.Api.Models.Payment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<decimal>("Amount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int?>("ClientCaseId")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("ClientId")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("Date")
                        .HasColumnType("TEXT");

                    b.Property<int?>("DealTypeId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("TEXT");

                    b.Property<int?>("IncomeTypeId")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsPaid")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Notes")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("PaidDate")
                        .HasColumnType("TEXT");

                    b.Property<int?>("PaymentSourceId")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("PaymentStatusId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("CreatedAt")
                        .HasDatabaseName("IX_Payments_CreatedAt");

                    b.HasIndex("Date")
                        .HasDatabaseName("IX_Payments_Date");

                    b.HasIndex("DealTypeId")
                        .HasDatabaseName("IX_Payments_DealTypeId");

                    b.HasIndex("IncomeTypeId")
                        .HasDatabaseName("IX_Payments_IncomeTypeId");

                    b.HasIndex("PaymentSourceId")
                        .HasDatabaseName("IX_Payments_PaymentSourceId");

                    b.HasIndex("PaymentStatusId")
                        .HasDatabaseName("IX_Payments_PaymentStatusId");

                    b.HasIndex("ClientCaseId", "Date")
                        .HasDatabaseName("IX_Payments_ClientCaseId_Date");

                    b.HasIndex("ClientId", "Date")
                        .HasDatabaseName("IX_Payments_ClientId_Date");

                    b.HasIndex("IsPaid", "Date")
                        .HasDatabaseName("IX_Payments_IsPaid_Date");

                    b.HasIndex("IsPaid", "Status")
                        .HasDatabaseName("IX_Payments_IsPaid_Status");

                    b.ToTable("Payments");
                });

            modelBuilder.Entity("PayPlanner.Api.Models.PaymentSource", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("ColorHex")
                        .IsRequired()
                        .HasMaxLength(7)
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsActive")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("IsActive")
                        .HasDatabaseName("IX_PaymentSources_IsActive");

                    b.HasIndex("Name")
                        .HasDatabaseName("IX_PaymentSources_Name");

                    b.HasIndex("IsActive", "Name")
                        .HasDatabaseName("IX_PaymentSources_IsActive_Name");

                    b.ToTable("PaymentSources");
                });

            modelBuilder.Entity("PayPlanner.Api.Models.PaymentStatusEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("ColorHex")
                        .IsRequired()
                        .HasMaxLength(7)
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsActive")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("IsActive")
                        .HasDatabaseName("IX_PaymentStatuses_IsActive");

                    b.HasIndex("Name")
                        .HasDatabaseName("IX_PaymentStatuses_Name");

                    b.HasIndex("IsActive", "Name")
                        .HasDatabaseName("IX_PaymentStatuses_IsActive_Name");

                    b.ToTable("PaymentStatuses");
                });

            modelBuilder.Entity("PayPlanner.Api.Models.ClientCase", b =>
                {
                    b.HasOne("PayPlanner.Api.Models.Client", "Client")
                        .WithMany("Cases")
                        .HasForeignKey("ClientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Client");
                });

            modelBuilder.Entity("PayPlanner.Api.Models.Payment", b =>
                {
                    b.HasOne("PayPlanner.Api.Models.ClientCase", "ClientCase")
                        .WithMany("Payments")
                        .HasForeignKey("ClientCaseId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("PayPlanner.Api.Models.Client", "Client")
                        .WithMany("Payments")
                        .HasForeignKey("ClientId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("PayPlanner.Api.Models.DealType", "DealType")
                        .WithMany("Payments")
                        .HasForeignKey("DealTypeId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("PayPlanner.Api.Models.IncomeType", "IncomeType")
                        .WithMany("Payments")
                        .HasForeignKey("IncomeTypeId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("PayPlanner.Api.Models.PaymentSource", "PaymentSource")
                        .WithMany("Payments")
                        .HasForeignKey("PaymentSourceId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("PayPlanner.Api.Models.PaymentStatusEntity", "PaymentStatusEntity")
                        .WithMany("Payments")
                        .HasForeignKey("PaymentStatusId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("Client");

                    b.Navigation("ClientCase");

                    b.Navigation("DealType");

                    b.Navigation("IncomeType");

                    b.Navigation("PaymentSource");

                    b.Navigation("PaymentStatusEntity");
                });

            modelBuilder.Entity("PayPlanner.Api.Models.Client", b =>
                {
                    b.Navigation("Cases");

                    b.Navigation("Payments");
                });

            modelBuilder.Entity("PayPlanner.Api.Models.ClientCase", b =>
                {
                    b.Navigation("Payments");
                });

            modelBuilder.Entity("PayPlanner.Api.Models.DealType", b =>
                {
                    b.Navigation("Payments");
                });

            modelBuilder.Entity("PayPlanner.Api.Models.IncomeType", b =>
                {
                    b.Navigation("Payments");
                });

            modelBuilder.Entity("PayPlanner.Api.Models.PaymentSource", b =>
                {
                    b.Navigation("Payments");
                });

            modelBuilder.Entity("PayPlanner.Api.Models.PaymentStatusEntity", b =>
                {
                    b.Navigation("Payments");
                });
#pragma warning restore 612, 618
        }
    }
}
